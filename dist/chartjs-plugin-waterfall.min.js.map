{"version":3,"file":"chartjs-plugin-waterfall.min.js","sources":["../src/drawStepLines.js","../src/index.js"],"sourcesContent":["import groupBy from 'lodash.groupby';\n\nconst DEBUG = false;\n\nconst drawOnCanvas = (context, options, currentDatapointValues, nextDatapointValues) => {\n  let currentStackBase = currentDatapointValues.stackBase;\n  let nextStackBase = nextDatapointValues.stackBase;\n  let currentStackTopYPos = currentDatapointValues.stackTopYPos;\n  let nextStackTopYPos = nextDatapointValues.stackTopYPos;\n\n  /* If the heights match top to bottom or bottom to top then\n  flip the top coordinates to be at the bottom so that a horizontal step line is drawn */\n  if (currentStackTopYPos === nextStackBase) {\n    nextStackTopYPos = nextStackBase;\n    nextStackBase = nextDatapointValues.dummyStackBase;\n  } else if (currentStackBase === nextStackTopYPos) {\n    currentStackTopYPos = currentStackBase;\n    currentStackBase = currentDatapointValues.dummyStackBase;\n  }\n\n  // We need to flip the y co-ords if one of the datasets is negative and the other isn't\n  if (!currentDatapointValues.isPositive && nextDatapointValues.isPositive) {\n    nextStackTopYPos = nextStackBase;\n    nextStackBase = nextDatapointValues.stackTopYPos;\n  }\n\n  if (currentDatapointValues.isPositive && !nextDatapointValues.isPositive) {\n    currentStackTopYPos = currentStackBase;\n    currentStackBase = currentDatapointValues.stackTopYPos;\n  }\n\n  // Draws co-ords on the canvas to allow easier debugging\n  if (DEBUG) {\n    context.font = '9px Arial';\n    context.fillStyle = '#000';\n    context.fillText(`TR: ${currentDatapointValues.stackRightXPos.toFixed(0)}`, currentDatapointValues.stackRightXPos, currentStackTopYPos);\n    context.fillText(`TL: ${nextDatapointValues.stackLeftXPos.toFixed(0)}`, nextDatapointValues.stackLeftXPos, nextStackTopYPos);\n    context.fillText(`BL: ${nextStackBase.toFixed(0)}`, nextDatapointValues.stackLeftXPos, nextStackBase);\n    context.fillText(`BR: ${currentStackBase.toFixed(0)}`, currentDatapointValues.stackRightXPos, currentStackBase);\n  }\n\n  // Makes sure that each step line is consistent\n  const yStart = currentStackTopYPos > nextStackTopYPos ? currentStackTopYPos : nextStackTopYPos;\n  const yEnd = currentStackBase > nextStackBase ? currentStackBase : nextStackBase;\n\n  // Gradient from top of second box to bottom of both boxes\n  const gradient = context.createLinearGradient(0, yStart, 0, yEnd);\n\n  // Dataset options take priority if they are specified\n  const startColor = currentDatapointValues.options.startColor || options.startColor;\n  const endColor = currentDatapointValues.options.endColor || options.endColor;\n  const startColorStop = currentDatapointValues.options.startColorStop || options.startColorStop;\n  const endColorStop = currentDatapointValues.options.endColorStop || options.endColorStop;\n\n  gradient.addColorStop(startColorStop, startColor);\n  gradient.addColorStop(endColorStop, endColor);\n\n  context.fillStyle = gradient;\n\n  context.beginPath();\n\n  // top right of first box\n  context.lineTo(currentDatapointValues.stackRightXPos, currentStackTopYPos);\n  // top left of second box\n  context.lineTo(nextDatapointValues.stackLeftXPos, nextStackTopYPos);\n  // bottom left of second box\n  context.lineTo(nextDatapointValues.stackLeftXPos, nextStackBase);\n  // bottom right of first box\n  context.lineTo(currentDatapointValues.stackRightXPos, currentStackBase);\n\n  context.fill();\n};\n\nexport default (chart) => {\n  const context = chart.ctx;\n  const datasets = chart.data.datasets;\n  const options = chart.options.plugins.waterFallPlugin.stepLines;\n  const stackedDatasets = groupBy(datasets, 'stack');\n  const newDatasets = [];\n\n  const getModel = (dataset) => {\n    const firstKey = Object.keys(dataset._meta)[0];\n\n    return dataset._meta[firstKey].data[0]._model;\n  };\n\n  Object.keys(stackedDatasets).forEach((key) => {\n    const currentStackedDataset = stackedDatasets[key];\n\n    const nonDummyStacks = currentStackedDataset.filter(dataset => !dataset.waterfall.dummyStack);\n    const bases = nonDummyStacks.map(dataset => getModel(dataset).base);\n    const lowestBase = Math.max(...bases);\n\n    const dummStackBases = currentStackedDataset.map(dataset => getModel(dataset).base);\n    const lowestDummyStackBase = Math.max(...dummStackBases);\n\n    // Loop through each sub stack\n    const properties = currentStackedDataset.map((dataset) => {\n      const model = getModel(dataset);\n\n      return {\n        stackRightXPos: model.x + (model.width / 2),\n        stackLeftXPos: model.x - (model.width / 2),\n        stackTopYPos: model.y,\n        stackBase: lowestBase,\n        dummyStackBase: lowestDummyStackBase,\n        isPositive: dataset.data[0] > 0,\n        options: dataset.waterfall.stepLines,\n      };\n    });\n\n    newDatasets.push(properties);\n  });\n\n  // Gets the values for the steplines at the top of the stack\n  const getDatapointsValues = (dataset) => {\n    const index = dataset.length - 1;\n\n    return {\n      stackRightXPos: dataset[index].stackRightXPos,\n      stackLeftXPos: dataset[index].stackLeftXPos,\n      stackTopYPos: dataset[index].stackTopYPos,\n      stackBase: dataset[index].stackBase,\n      dummyStackBase: dataset[index].dummyStackBase,\n      isPositive: dataset[index].isPositive,\n      options: dataset[index].options,\n    };\n  };\n\n  const stacksYPosAndBaseAreEqual = (currentDatapointValues, nextDatapointValues) =>\n    (currentDatapointValues.stackTopYPos === nextDatapointValues.stackTopYPos &&\n    currentDatapointValues.stackBase === nextDatapointValues.stackBase);\n\n  for (let i = 0; i < newDatasets.length; i += 1) {\n    const currentDataSet = newDatasets[i];\n\n    if (i !== newDatasets.length - 1) {\n      const nextDataSet = newDatasets[i + 1];\n      const currentDatapointValues = getDatapointsValues(currentDataSet);\n      const nextDatapointValues = getDatapointsValues(nextDataSet);\n\n      if (options.diagonalStepLines || stacksYPosAndBaseAreEqual(currentDatapointValues, nextDatapointValues)) {\n        drawOnCanvas(context, options, currentDatapointValues, nextDatapointValues);\n      }\n\n      // Custom step lines that can go from each sub-stack to another sub-stack\n      if (Array.isArray(options.diagonalStepLines)) {\n        options.diagonalStepLines.forEach((stepLinesIndexArray) => {\n          const firstCoordinateIndex = stepLinesIndexArray[0];\n          const secondCoordinateIndex = stepLinesIndexArray[1];\n          const currentDiagonalDatapointValues = currentDataSet[firstCoordinateIndex];\n          const nextDiagonalDatapointValues = nextDataSet[secondCoordinateIndex];\n\n          if (currentDiagonalDatapointValues && nextDiagonalDatapointValues) {\n            drawOnCanvas(context, options, currentDiagonalDatapointValues, nextDiagonalDatapointValues);\n          }\n        });\n      }\n    }\n  }\n};\n","import merge from 'lodash.merge';\n\nimport drawStepLines from './drawStepLines';\n\nconst defaultOptions = {\n  waterFallPlugin: {\n    stepLines: {\n      enabled: true,\n      startColorStop: 0,\n      endColorStop: 0.6,\n      startColor: 'rgba(0, 0, 0, 0.55)', // opaque\n      endColor: 'rgba(0, 0, 0, 0)', // transparent\n      diagonalStepLines: true,\n    },\n  },\n};\n\nconst status = {};\n\nconst filterDummyStacks = (legendItem, chartData) => {\n  const currentDataset = chartData.datasets[legendItem.datasetIndex];\n\n  return !currentDataset.waterfall.dummyStack;\n};\n\nconst initializeDatasets = (chart) => {\n  chart.data.datasets.forEach((dataset, i) => {\n    dataset.waterfall = merge({}, {\n      stepLines: {},\n    }, dataset.waterfall);\n\n    // Each dataset must have a unique label so we set the dummy stacks to have dummy labels\n    if (dataset.waterfall.dummyStack) {\n      dataset.label = `dummyStack_${i}`;\n      dataset.backgroundColor = 'rgba(0, 0, 0, 0)';\n    }\n  });\n};\n\nconst waterFallPlugin = {\n  beforeInit: (chart) => {\n    status[chart.id] = {\n      readyToDrawStepLines: false,\n    };\n  },\n  afterInit: (chart) => {\n    initializeDatasets(chart);\n\n    chart.options.plugins = merge({}, defaultOptions, chart.options.plugins);\n    chart.options.tooltips.filter = filterDummyStacks;\n    chart.options.legend.labels.filter = filterDummyStacks;\n\n    // Can't override onComplete function because it gets overwridden if user using React\n    setTimeout(() => {\n      status[chart.id].readyToDrawStepLines = true;\n\n      drawStepLines(chart);\n    }, chart.options.animation.duration);\n  },\n  afterDraw: (chart) => {\n    const options = chart.options.plugins.waterFallPlugin;\n\n    initializeDatasets(chart);\n\n    if (options.stepLines.enabled &&\n        status[chart.id].readyToDrawStepLines) {\n      drawStepLines(chart);\n    }\n  },\n};\n\nexport default waterFallPlugin;\n"],"names":["drawOnCanvas","context","options","currentDatapointValues","nextDatapointValues","currentStackBase","stackBase","nextStackBase","currentStackTopYPos","stackTopYPos","nextStackTopYPos","dummyStackBase","isPositive","yStart","yEnd","gradient","createLinearGradient","startColor","endColor","startColorStop","endColorStop","addColorStop","fillStyle","beginPath","lineTo","stackRightXPos","stackLeftXPos","fill","chart","ctx","datasets","data","plugins","waterFallPlugin","stepLines","stackedDatasets","groupBy","newDatasets","getModel","dataset","firstKey","Object","keys","_meta","_model","forEach","key","currentStackedDataset","bases","filter","waterfall","dummyStack","map","base","lowestBase","Math","max","dummStackBases","lowestDummyStackBase","properties","model","x","width","y","push","getDatapointsValues","index","length","i","currentDataSet","nextDataSet","diagonalStepLines","stacksYPosAndBaseAreEqual","Array","isArray","stepLinesIndexArray","firstCoordinateIndex","secondCoordinateIndex","currentDiagonalDatapointValues","nextDiagonalDatapointValues","defaultOptions","status","filterDummyStacks","legendItem","chartData","datasetIndex","initializeDatasets","merge","label","backgroundColor","id","tooltips","legend","labels","readyToDrawStepLines","animation","duration","enabled"],"mappings":"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"}