{"version":3,"file":"chartjs-plugin-waterfall.min.js","sources":["../src/drawStepLines.js","../src/index.js"],"sourcesContent":["import groupBy from 'lodash.groupby';\n\nexport default (context, datasets, options) => {\n  const stackedDatasets = groupBy(datasets, 'stack');\n  const newDatasets = [];\n  const getModel = (dataset) => {\n    const firstKey = Object.keys(dataset._meta)[0];\n\n    return dataset._meta[firstKey].data[0]._model;\n  };\n\n  Object.keys(stackedDatasets).forEach((key) => {\n    const currentStackedDataset = stackedDatasets[key];\n    const firstRealModel = getModel(currentStackedDataset.find(x => !x.dummyStack));\n    const firstModel = getModel(currentStackedDataset[0]);\n    const lastModel = getModel(currentStackedDataset[currentStackedDataset.length - 1]);\n\n    newDatasets.push({\n      stackRightXPos: firstModel.x + (firstModel.width / 2),\n      stackLeftXPos: firstModel.x - (firstModel.width / 2),\n      stackRealBottomYPos: firstRealModel.base,\n      stackBottomYPos: firstModel.base,\n      stackTopYPos: lastModel.y,\n    });\n  });\n\n  for (let i = 0; i < newDatasets.length; i += 1) {\n    const firstDataSet = newDatasets[i];\n\n    if (i !== newDatasets.length - 1) {\n      const secondDataSet = newDatasets[i + 1];\n\n      // Needed to convert step lines to look like bars when we have floating stacks\n      if (firstDataSet.stackTopYPos === secondDataSet.stackRealBottomYPos) {\n        secondDataSet.stackTopYPos = secondDataSet.stackRealBottomYPos;\n      } else if (firstDataSet.stackRealBottomYPos === secondDataSet.stackTopYPos) {\n        firstDataSet.stackTopYPos = firstDataSet.stackRealBottomYPos;\n      }\n\n      // Gradient from top of second box to bottom of both boxes\n      const gradient = context.createLinearGradient(\n        0,\n        secondDataSet.stackTopYPos,\n        0,\n        secondDataSet.stackBottomYPos,\n      );\n\n      gradient.addColorStop(options.startColorStop, options.startColor);\n      gradient.addColorStop(options.endColorStop, options.endColor);\n\n      context.fillStyle = gradient;\n\n      context.beginPath();\n      // top right of first box\n      context.lineTo(firstDataSet.stackRightXPos, firstDataSet.stackTopYPos);\n      // top left of second box\n      context.lineTo(secondDataSet.stackLeftXPos, secondDataSet.stackTopYPos);\n      // bottom left of second box\n      context.lineTo(secondDataSet.stackLeftXPos, secondDataSet.stackBottomYPos);\n      // bottom right of first box\n      context.lineTo(firstDataSet.stackRightXPos, firstDataSet.stackBottomYPos);\n      context.fill();\n    }\n  }\n};\n","import merge from 'lodash.merge';\n\nimport drawStepLines from './drawStepLines';\n\nconst defaultOptions = {\n  waterFallPlugin: {\n    stepLines: {\n      enabled: true,\n      startColorStop: 0,\n      endColorStop: 0.6,\n      startColor: 'rgba(0, 0, 0, 0.55)', // opaque\n      endColor: 'rgba(0, 0, 0, 0)', // transparent\n    },\n  },\n};\n\nconst filterDummyStacks = (legendItem, chartData) => {\n  const currentDataset = chartData.datasets[legendItem.datasetIndex];\n\n  return !currentDataset.dummyStack;\n};\n\nconst waterFallPlugin = {\n  afterInit: (chart) => {\n    chart.options.tooltips.filter = filterDummyStacks;\n    chart.options.legend.labels.filter = filterDummyStacks;\n    chart.options.plugins = merge({}, defaultOptions, chart.options.plugins);\n    chart.data.datasets.forEach((dataset, i) => {\n      // Each dataset must have a unique label so we set the dummy stacks to have dummy labels\n      if (dataset.dummyStack) {\n        dataset.label = `dummyStack_${i}`;\n        dataset.backgroundColor = 'rgba(0, 0, 0, 0)';\n      }\n    });\n  },\n  afterDraw: (chart) => {\n    const options = chart.options.plugins.waterFallPlugin;\n\n    if (options.stepLines.enabled) {\n      drawStepLines(chart.ctx, chart.data.datasets, options.stepLines);\n    }\n  },\n};\n\nexport default waterFallPlugin;\n"],"names":["context","datasets","options","stackedDatasets","groupBy","newDatasets","getModel","dataset","firstKey","Object","keys","_meta","data","_model","forEach","key","currentStackedDataset","firstRealModel","find","x","dummyStack","firstModel","lastModel","length","push","width","base","y","i","firstDataSet","secondDataSet","stackTopYPos","stackRealBottomYPos","gradient","createLinearGradient","stackBottomYPos","addColorStop","startColorStop","startColor","endColorStop","endColor","fillStyle","beginPath","lineTo","stackRightXPos","stackLeftXPos","fill","defaultOptions","filterDummyStacks","legendItem","chartData","datasetIndex","chart","tooltips","filter","legend","labels","plugins","merge","label","backgroundColor","waterFallPlugin","stepLines","enabled","ctx"],"mappings":"wYAEA,eAAgBA,EAASC,EAAUC,OAC3BC,EAAkBC,EAAQH,EAAU,SACpCI,KACAC,EAAW,SAACC,OACVC,EAAWC,OAAOC,KAAKH,EAAQI,OAAO,UAErCJ,EAAQI,MAAMH,GAAUI,KAAK,GAAGC,eAGlCH,KAAKP,GAAiBW,QAAQ,SAACC,OAC9BC,EAAwBb,EAAgBY,GACxCE,EAAiBX,EAASU,EAAsBE,KAAK,mBAAMC,EAAEC,cAC7DC,EAAaf,EAASU,EAAsB,IAC5CM,EAAYhB,EAASU,EAAsBA,EAAsBO,OAAS,MAEpEC,qBACMH,EAAWF,EAAKE,EAAWI,MAAQ,gBACpCJ,EAAWF,EAAKE,EAAWI,MAAQ,sBAC7BR,EAAeS,qBACnBL,EAAWK,kBACdJ,EAAUK,UAIvB,IAAIC,EAAI,EAAGA,EAAIvB,EAAYkB,OAAQK,GAAK,EAAG,KACxCC,EAAexB,EAAYuB,MAE7BA,IAAMvB,EAAYkB,OAAS,EAAG,KAC1BO,EAAgBzB,EAAYuB,EAAI,GAGlCC,EAAaE,eAAiBD,EAAcE,sBAChCD,aAAeD,EAAcE,oBAClCH,EAAaG,sBAAwBF,EAAcC,iBAC/CA,aAAeF,EAAaG,yBAIrCC,EAAWjC,EAAQkC,qBACvB,EACAJ,EAAcC,aACd,EACAD,EAAcK,mBAGPC,aAAalC,EAAQmC,eAAgBnC,EAAQoC,cAC7CF,aAAalC,EAAQqC,aAAcrC,EAAQsC,YAE5CC,UAAYR,IAEZS,cAEAC,OAAOd,EAAae,eAAgBf,EAAaE,gBAEjDY,OAAOb,EAAce,cAAef,EAAcC,gBAElDY,OAAOb,EAAce,cAAef,EAAcK,mBAElDQ,OAAOd,EAAae,eAAgBf,EAAaM,mBACjDW,UCzDRC,wCAGS,iBACO,eACF,cACF,+BACF,sBAKVC,EAAoB,SAACC,EAAYC,UACdA,EAAUjD,SAASgD,EAAWE,cAE9B/B,6BAIZ,SAACgC,KACJlD,QAAQmD,SAASC,OAASN,IAC1B9C,QAAQqD,OAAOC,OAAOF,OAASN,IAC/B9C,QAAQuD,QAAUC,KAAUX,EAAgBK,EAAMlD,QAAQuD,WAC1D7C,KAAKX,SAASa,QAAQ,SAACP,EAASqB,GAEhCrB,EAAQa,eACFuC,oBAAsB/B,IACtBgC,gBAAkB,iCAIrB,SAACR,OACJlD,EAAUkD,EAAMlD,QAAQuD,QAAQI,gBAElC3D,EAAQ4D,UAAUC,WACNX,EAAMY,IAAKZ,EAAMxC,KAAKX,SAAUC,EAAQ4D"}