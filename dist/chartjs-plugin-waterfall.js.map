{"version":3,"file":"chartjs-plugin-waterfall.js","sources":["../src/drawStepLines.js","../src/index.js"],"sourcesContent":["import groupBy from 'lodash.groupby';\n\nconst drawOnCanvas = (context, options, firstDataPoints, secondDataPoints, useFakeBase) => {\n  const firstStackBase = useFakeBase ? firstDataPoints.stackFakeBase : firstDataPoints.stackBase;\n  const secondStackBase = useFakeBase ? secondDataPoints.stackFakeBase : secondDataPoints.stackBase;\n\n  // Gradient from top of second box to bottom of both boxes\n  const gradient = context.createLinearGradient(\n    0,\n    secondDataPoints.stackTopYPos,\n    0,\n    secondStackBase,\n  );\n\n  gradient.addColorStop(options.startColorStop, options.startColor);\n  gradient.addColorStop(options.endColorStop, options.endColor);\n\n  context.fillStyle = gradient;\n\n  context.beginPath();\n  // top right of first box\n  context.lineTo(firstDataPoints.stackRightXPos, firstDataPoints.stackTopYPos);\n  // top left of second box\n  context.lineTo(secondDataPoints.stackLeftXPos, secondDataPoints.stackTopYPos);\n  // bottom left of second box\n  context.lineTo(secondDataPoints.stackLeftXPos, secondStackBase);\n  // bottom right of first box\n  context.lineTo(firstDataPoints.stackRightXPos, firstStackBase);\n  context.fill();\n};\n\nexport default (chart) => {\n  const context = chart.ctx;\n  const datasets = chart.data.datasets;\n  const options = chart.options.plugins.waterFallPlugin.stepLines;\n  const stackedDatasets = groupBy(datasets, 'stack');\n  const newDatasets = [];\n  const getModel = (dataset) => {\n    const firstKey = Object.keys(dataset._meta)[0];\n\n    return dataset._meta[firstKey].data[0]._model;\n  };\n\n  const getNewDataPoints = (existingDataset) => {\n    const newDataPoints = [];\n    let stackBase = null;\n\n    existingDataset.forEach((dataset, i) => {\n      const model = getModel(dataset);\n\n      if (i === 0) {\n        stackBase = model.base;\n      }\n\n      newDataPoints.push({\n        stackRightXPos: model.x + (model.width / 2),\n        stackLeftXPos: model.x - (model.width / 2),\n        stackTopYPos: model.y,\n        stackBase,\n      });\n    });\n\n    return newDataPoints;\n  };\n\n  Object.keys(stackedDatasets).forEach((key) => {\n    const currentStackedDataset = stackedDatasets[key];\n    const realStackedDataset = currentStackedDataset.filter(x => !x.dummyStack);\n\n    newDatasets.push({\n      allDataPoints: getNewDataPoints(currentStackedDataset),\n      allRealDataPoints: getNewDataPoints(realStackedDataset),\n    });\n  });\n\n  const getFirstDataPointValues = dataset => ({\n    stackRightXPos: dataset.allRealDataPoints[0].stackRightXPos,\n    stackLeftXPos: dataset.allRealDataPoints[0].stackLeftXPos,\n    stackTopYPos: dataset.allRealDataPoints[dataset.allRealDataPoints.length - 1].stackTopYPos,\n    stackBase: dataset.allRealDataPoints[0].stackBase,\n    stackFakeBase: dataset.allDataPoints[0].stackBase,\n  });\n\n  const stacksYPosOrBaseAreEqual = (firstDataPoints, secondDataPoints) =>\n    (firstDataPoints.stackTopYPos === secondDataPoints.stackTopYPos &&\n    firstDataPoints.stackFakeBase === secondDataPoints.stackFakeBase);\n\n  for (let i = 0; i < newDatasets.length; i += 1) {\n    const firstDataSet = newDatasets[i];\n\n    if (i !== newDatasets.length - 1) {\n      const secondDataSet = newDatasets[i + 1];\n      const firstDataPoints = getFirstDataPointValues(firstDataSet);\n      const secondDataPoints = getFirstDataPointValues(secondDataSet);\n\n      // Needed to convert step lines to look like bars when we have floating stacks\n      if (firstDataPoints.stackTopYPos === secondDataPoints.stackBase) {\n        secondDataPoints.stackTopYPos = secondDataPoints.stackBase;\n      } else if (firstDataPoints.stackBase === secondDataPoints.stackTopYPos) {\n        firstDataPoints.stackTopYPos = firstDataPoints.stackBase;\n      }\n\n      if (options.diagonalStepLines ||\n          stacksYPosOrBaseAreEqual(firstDataPoints, secondDataPoints)) {\n        drawOnCanvas(context, options, firstDataPoints, secondDataPoints, true);\n      }\n\n      if (Array.isArray(options.diagonalStepLines)) {\n        options.diagonalStepLines.forEach((dataPointArray) => {\n          const firstDataPointIndex = dataPointArray[0];\n          const secondDataPointIndex = dataPointArray[1];\n          const firstDiagonalDataPoints = firstDataSet.allRealDataPoints[firstDataPointIndex];\n          const secondDiagonalDataPoints = secondDataSet.allRealDataPoints[secondDataPointIndex];\n\n          if (firstDiagonalDataPoints && secondDiagonalDataPoints) {\n            drawOnCanvas(context, options, firstDiagonalDataPoints, secondDiagonalDataPoints);\n          }\n        });\n      }\n    }\n  }\n};\n","import merge from 'lodash.merge';\n\nimport drawStepLines from './drawStepLines';\n\nconst defaultOptions = {\n  waterFallPlugin: {\n    stepLines: {\n      enabled: true,\n      startColorStop: 0,\n      endColorStop: 0.6,\n      startColor: 'rgba(0, 0, 0, 0.55)', // opaque\n      endColor: 'rgba(0, 0, 0, 0)', // transparent\n      diagonalStepLines: true,\n    },\n  },\n};\n\nconst status = {};\n\nconst filterDummyStacks = (legendItem, chartData) => {\n  const currentDataset = chartData.datasets[legendItem.datasetIndex];\n\n  return !currentDataset.dummyStack;\n};\n\nconst waterFallPlugin = {\n  beforeInit: (chart) => {\n    status[chart.id] = {\n      readyToDrawStepLines: false,\n    };\n  },\n  afterInit: (chart) => {\n    chart.options.plugins = merge({}, defaultOptions, chart.options.plugins);\n    chart.options.tooltips.filter = filterDummyStacks;\n    chart.options.legend.labels.filter = filterDummyStacks;\n\n    // Can't override onComplete function because it gets overwridden if user using React\n    setTimeout(() => {\n      status[chart.id].readyToDrawStepLines = true;\n\n      drawStepLines(chart);\n    }, chart.options.animation.duration);\n\n\n    chart.data.datasets.forEach((dataset, i) => {\n      // Each dataset must have a unique label so we set the dummy stacks to have dummy labels\n      if (dataset.dummyStack) {\n        dataset.label = `dummyStack_${i}`;\n        dataset.backgroundColor = 'rgba(0, 0, 0, 0)';\n      }\n    });\n  },\n  afterDraw: (chart) => {\n    const options = chart.options.plugins.waterFallPlugin;\n\n    if (options.stepLines.enabled &&\n        status[chart.id].readyToDrawStepLines) {\n      drawStepLines(chart);\n    }\n  },\n};\n\nexport default waterFallPlugin;\n"],"names":["drawOnCanvas","context","options","firstDataPoints","secondDataPoints","useFakeBase","firstStackBase","stackFakeBase","stackBase","secondStackBase","gradient","createLinearGradient","stackTopYPos","addColorStop","startColorStop","startColor","endColorStop","endColor","fillStyle","beginPath","lineTo","stackRightXPos","stackLeftXPos","fill","chart","ctx","datasets","data","plugins","waterFallPlugin","stepLines","stackedDatasets","groupBy","newDatasets","getModel","dataset","firstKey","Object","keys","_meta","_model","getNewDataPoints","existingDataset","newDataPoints","forEach","i","model","base","push","x","width","y","key","currentStackedDataset","realStackedDataset","filter","dummyStack","getFirstDataPointValues","allRealDataPoints","length","allDataPoints","stacksYPosOrBaseAreEqual","firstDataSet","secondDataSet","diagonalStepLines","Array","isArray","dataPointArray","firstDataPointIndex","secondDataPointIndex","firstDiagonalDataPoints","secondDiagonalDataPoints","defaultOptions","status","filterDummyStacks","legendItem","chartData","currentDataset","datasetIndex","id","merge","tooltips","legend","labels","readyToDrawStepLines","animation","duration","label","backgroundColor","enabled"],"mappings":"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"}