{"version":3,"file":"chartjs-plugin-waterfall.js","sources":["../src/drawStepLines.js","../src/index.js"],"sourcesContent":["import groupBy from 'lodash.groupby';\n\nconst DEBUG = false;\n\nconst drawOnCanvas = (context, options, currentDatapointValues, nextDatapointValues) => {\n  let currentStackBase = currentDatapointValues.stackBase;\n  let nextStackBase = nextDatapointValues.stackBase;\n  let currentStackTopYPos = currentDatapointValues.stackTopYPos;\n  let nextStackTopYPos = nextDatapointValues.stackTopYPos;\n\n  /* If the heights match top to bottom or bottom to top then\n  flip the top coordinates to be at the bottom so that a horizontal step line is drawn */\n  if (currentStackTopYPos === nextStackBase) {\n    nextStackTopYPos = nextStackBase;\n    nextStackBase = nextDatapointValues.dummyStackBase;\n  } else if (currentStackBase === nextStackTopYPos) {\n    currentStackTopYPos = currentStackBase;\n    currentStackBase = currentDatapointValues.dummyStackBase;\n  }\n\n  // We need to flip the y co-ords if one of the datasets is negative and the other isn't\n  if (!currentDatapointValues.isPositive && nextDatapointValues.isPositive) {\n    nextStackTopYPos = nextStackBase;\n    nextStackBase = nextDatapointValues.stackTopYPos;\n  }\n\n  if (currentDatapointValues.isPositive && !nextDatapointValues.isPositive) {\n    currentStackTopYPos = currentStackBase;\n    currentStackBase = currentDatapointValues.stackTopYPos;\n  }\n\n  // Draws co-ords on the canvas to allow easier debugging\n  if (DEBUG) {\n    context.font = '9px Arial';\n    context.fillStyle = '#000';\n    context.fillText(`TR: ${currentDatapointValues.stackRightXPos.toFixed(0)}`, currentDatapointValues.stackRightXPos, currentStackTopYPos);\n    context.fillText(`TL: ${nextDatapointValues.stackLeftXPos.toFixed(0)}`, nextDatapointValues.stackLeftXPos, nextStackTopYPos);\n    context.fillText(`BL: ${nextStackBase.toFixed(0)}`, nextDatapointValues.stackLeftXPos, nextStackBase);\n    context.fillText(`BR: ${currentStackBase.toFixed(0)}`, currentDatapointValues.stackRightXPos, currentStackBase);\n  }\n\n  // Makes sure that each step line is consistent\n  const yStart = currentStackTopYPos > nextStackTopYPos ? currentStackTopYPos : nextStackTopYPos;\n  const yEnd = currentStackBase > nextStackBase ? currentStackBase : nextStackBase;\n\n  // Gradient from top of second box to bottom of both boxes\n  const gradient = context.createLinearGradient(0, yStart, 0, yEnd);\n\n  // Dataset options take priority if they are specified\n  const startColor = currentDatapointValues.options.startColor || options.startColor;\n  const endColor = currentDatapointValues.options.endColor || options.endColor;\n  const startColorStop = currentDatapointValues.options.startColorStop || options.startColorStop;\n  const endColorStop = currentDatapointValues.options.endColorStop || options.endColorStop;\n\n  gradient.addColorStop(startColorStop, startColor);\n  gradient.addColorStop(endColorStop, endColor);\n\n  context.fillStyle = gradient;\n\n  context.beginPath();\n\n  // top right of first box\n  context.lineTo(currentDatapointValues.stackRightXPos, currentStackTopYPos);\n  // top left of second box\n  context.lineTo(nextDatapointValues.stackLeftXPos, nextStackTopYPos);\n  // bottom left of second box\n  context.lineTo(nextDatapointValues.stackLeftXPos, nextStackBase);\n  // bottom right of first box\n  context.lineTo(currentDatapointValues.stackRightXPos, currentStackBase);\n\n  context.fill();\n};\n\nexport default (chart) => {\n  const context = chart.ctx;\n  const datasets = chart.data.datasets;\n  const options = chart.options.plugins.waterFallPlugin.stepLines;\n  const stackedDatasets = groupBy(datasets, 'stack');\n  const newDatasets = [];\n\n  const getModel = (dataset) => {\n    const firstKey = Object.keys(dataset._meta)[0];\n\n    return dataset._meta[firstKey].data[0]._model;\n  };\n\n  Object.keys(stackedDatasets).forEach((key) => {\n    const currentStackedDataset = stackedDatasets[key];\n\n    const nonDummyStacks = currentStackedDataset.filter(dataset => !dataset.waterfall.dummyStack);\n    const bases = nonDummyStacks.map(dataset => getModel(dataset).base);\n    const lowestBase = Math.max(...bases);\n\n    const dummStackBases = currentStackedDataset.map(dataset => getModel(dataset).base);\n    const lowestDummyStackBase = Math.max(...dummStackBases);\n\n    // Loop through each sub stack\n    const properties = currentStackedDataset.map((dataset) => {\n      const model = getModel(dataset);\n\n      return {\n        stackRightXPos: model.x + (model.width / 2),\n        stackLeftXPos: model.x - (model.width / 2),\n        stackTopYPos: model.y,\n        stackBase: lowestBase,\n        dummyStackBase: lowestDummyStackBase,\n        isPositive: dataset.data[0] > 0,\n        options: dataset.waterfall.stepLines,\n      };\n    });\n\n    newDatasets.push(properties);\n  });\n\n  // Gets the values for the steplines at the top of the stack\n  const getDatapointsValues = (dataset) => {\n    const index = dataset.length - 1;\n\n    return {\n      stackRightXPos: dataset[index].stackRightXPos,\n      stackLeftXPos: dataset[index].stackLeftXPos,\n      stackTopYPos: dataset[index].stackTopYPos,\n      stackBase: dataset[index].stackBase,\n      dummyStackBase: dataset[index].dummyStackBase,\n      isPositive: dataset[index].isPositive,\n      options: dataset[index].options,\n    };\n  };\n\n  for (let i = 0; i < newDatasets.length; i += 1) {\n    const currentDataSet = newDatasets[i];\n\n    if (i !== newDatasets.length - 1) {\n      const nextDataSet = newDatasets[i + 1];\n      const currentDatapointValues = getDatapointsValues(currentDataSet);\n      const nextDatapointValues = getDatapointsValues(nextDataSet);\n\n      if (currentDatapointValues.stackTopYPos === nextDatapointValues.stackTopYPos ||\n        currentDatapointValues.stackBase === nextDatapointValues.stackTopYPos ||\n        currentDatapointValues.stackTopYPos === nextDatapointValues.stackBase) {\n        drawOnCanvas(context, options, currentDatapointValues, nextDatapointValues);\n      }\n    }\n  }\n};\n","import merge from 'lodash.merge';\n\nimport drawStepLines from './drawStepLines';\n\nconst defaultOptions = {\n  waterFallPlugin: {\n    stepLines: {\n      enabled: true,\n      startColorStop: 0,\n      endColorStop: 0.6,\n      startColor: 'rgba(0, 0, 0, 0.55)', // opaque\n      endColor: 'rgba(0, 0, 0, 0)', // transparent\n    },\n  },\n};\n\nconst status = {};\n\nconst filterDummyStacks = (legendItem, chartData) => {\n  const currentDataset = chartData.datasets[legendItem.datasetIndex];\n\n  return !currentDataset.waterfall.dummyStack;\n};\n\nconst initializeDatasets = (chart) => {\n  chart.data.datasets.forEach((dataset) => {\n    dataset.waterfall = merge({}, {\n      stepLines: {},\n    }, dataset.waterfall);\n\n    if (dataset.waterfall.dummyStack) {\n      dataset.backgroundColor = 'rgba(0, 0, 0, 0)';\n    }\n  });\n};\n\nconst waterFallPlugin = {\n  beforeInit: (chart) => {\n    status[chart.id] = {\n      readyToDrawStepLines: false,\n    };\n  },\n  afterInit: (chart) => {\n    initializeDatasets(chart);\n\n    chart.options.plugins = merge({}, defaultOptions, chart.options.plugins);\n    chart.options.tooltips.filter = filterDummyStacks;\n    chart.options.legend.labels.filter = filterDummyStacks;\n\n    // Can't override onComplete function because it gets overwridden if user using React\n    setTimeout(() => {\n      status[chart.id].readyToDrawStepLines = true;\n      const options = chart.options.plugins.waterFallPlugin;\n\n      if (options.stepLines.enabled) {\n        drawStepLines(chart);\n      }\n    }, chart.options.animation.duration);\n  },\n  afterDraw: (chart) => {\n    const options = chart.options.plugins.waterFallPlugin;\n\n    initializeDatasets(chart);\n\n    if (options.stepLines.enabled &&\n        status[chart.id].readyToDrawStepLines) {\n      drawStepLines(chart);\n    }\n  },\n};\n\nexport default waterFallPlugin;\n"],"names":["DEBUG","drawOnCanvas","context","options","currentDatapointValues","nextDatapointValues","currentStackBase","stackBase","nextStackBase","currentStackTopYPos","stackTopYPos","nextStackTopYPos","dummyStackBase","isPositive","font","fillStyle","fillText","stackRightXPos","toFixed","stackLeftXPos","yStart","yEnd","gradient","createLinearGradient","startColor","endColor","startColorStop","endColorStop","addColorStop","beginPath","lineTo","fill","chart","ctx","datasets","data","plugins","waterFallPlugin","stepLines","stackedDatasets","groupBy","newDatasets","getModel","dataset","firstKey","Object","keys","_meta","_model","forEach","key","currentStackedDataset","nonDummyStacks","filter","waterfall","dummyStack","bases","map","base","lowestBase","Math","max","dummStackBases","lowestDummyStackBase","properties","model","x","width","y","push","getDatapointsValues","index","length","i","currentDataSet","nextDataSet","defaultOptions","status","filterDummyStacks","legendItem","chartData","currentDataset","datasetIndex","initializeDatasets","merge","backgroundColor","id","tooltips","legend","labels","readyToDrawStepLines","enabled","animation","duration"],"mappings":"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"}